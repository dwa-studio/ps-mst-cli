import { ApiClient } from './api-client'
import { UserSnapshotOut } from '../models/User/User'

type loginData = { email: string; password: string } | { username: string; password: string }

export class UserService<T> {
  apiClient: ApiClient
  className: string

  constructor(_client: ApiClient) {
    this.apiClient = _client
  }

  signup(data: any): Promise<Omit<UserSnapshotOut, 'password'>> {
    return this.apiClient.post<T>('users/', data)
  }

  login(data: loginData): Promise<Omit<UserSnapshotOut, 'password'>> {
    return this.apiClient.get<T>('login', data)
  }

  logout(sessionToken: string): Promise<{}> {
    return this.apiClient.post<T>(`logout`, {}, { 'X-Parse-Session-Token': sessionToken })
  }

  find(id: string, sessionToken?: string): Promise<Omit<UserSnapshotOut, 'password'>> {
    return this.apiClient.get<T>(`users/${id}`, {}, sessionToken ? { 'X-Parse-Session-Token': sessionToken } : {})
  }

  me(sessionToken: string): Promise<Omit<UserSnapshotOut, 'password'>> {
    return this.apiClient.get<T>('users/', {}, { 'X-Parse-Session-Token': sessionToken })
  }

  update(id: string, data: any, sessionToken?: string): Promise<Omit<UserSnapshotOut, 'password'>> {
    return this.apiClient.put<T>(`users/${id}`, data, sessionToken ? { 'X-Parse-Session-Token': sessionToken } : {})
  }

  query(data: any, sessionToken?: string): Promise<Omit<UserSnapshotOut, 'password'>> {
    return this.apiClient.get<T>('users/', data, sessionToken ? { 'X-Parse-Session-Token': sessionToken } : {})
  }

  delete(id: string, sessionToken?: string): Promise<Omit<UserSnapshotOut, 'password'>> {
    return this.apiClient.delete<T>('users/', {}, sessionToken ? { 'X-Parse-Session-Token': sessionToken } : {})
  }

  requestPasswordReset(data: any): Promise<Omit<UserSnapshotOut, 'password'>> {
    return this.apiClient.post<T>('users/', data)
  }
}
