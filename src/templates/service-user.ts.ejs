import { ApiClient } from './api-client'
import { UserSnapshotOut } from '../models/User/User'

type loginData = { email: string; password: string } | { username: string; password: string }

export class UserService<T> {
  apiClient: ApiClient
  className: string

  constructor(_client: ApiClient) {
    this.apiClient = _client
  }

  signup(data: any) {
    return this.apiClient.post<Omit<UserSnapshotOut, 'password'>>('users/', data)
  }

  login(data: loginData) {
    return this.apiClient.get<Omit<UserSnapshotOut, 'password'>>('login', data)
  }

  logout(sessionToken: string): Promise<{}> {
    return this.apiClient.post<{}>(`logout`, {}, { 'X-Parse-Session-Token': sessionToken })
  }

  find(id: string, sessionToken?: string) {
    return this.apiClient.get<Omit<UserSnapshotOut, 'password'>>(
      `users/${id}`,
      {},
      sessionToken ? { 'X-Parse-Session-Token': sessionToken } : {}
    )
  }

  me(sessionToken: string) {
    return this.apiClient.get<Omit<UserSnapshotOut, 'password'>>(
      'users/',
      {},
      { 'X-Parse-Session-Token': sessionToken }
    )
  }

  update(id: string, data: any, sessionToken?: string) {
    return this.apiClient.put<{ updateAt: string }>(
      `users/${id}`,
      data,
      sessionToken ? { 'X-Parse-Session-Token': sessionToken } : {}
    )
  }

  query(data: any, sessionToken?: string) {
    return this.apiClient.get<Omit<UserSnapshotOut, 'password'>[]>(
      'users/',
      data,
      sessionToken ? { 'X-Parse-Session-Token': sessionToken } : {}
    )
  }

  delete(id: string, sessionToken?: string) {
    return this.apiClient.delete<{}>('users/', {}, sessionToken ? { 'X-Parse-Session-Token': sessionToken } : {})
  }

  requestPasswordReset(data: any) {
    return this.apiClient.post<{}>('users/', data)
  }
}
